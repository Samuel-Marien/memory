import React, { useState, useEffect } from 'react'

import { useRouter } from 'next/router'
import Link from 'next/link'
import Head from 'next/head'

import { shuffle } from 'lodash'
import { useTimer } from 'use-timer'

import MyButton from '../components/MyButton'

import { MdTimer } from 'react-icons/md'
import { GiCardPick, GiClick } from 'react-icons/gi'

const numberArray = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
]
const iconsArray = [
  '😈',
  '☠️',
  '👽',
  '👾',
  '🤖',
  '🎃',
  '💩',
  '🤡',
  '🧙‍♂️',
  '👳🏾‍♂️',
  '👨🏾‍🚀',
  '🐙',
  '🦓',
  '🦍',
  '🍂',
  '🍄',
  '🍆',
  '🥜'
]

const Stat = (props) => {
  const { icon, data } = props
  return (
    <p className="flex items-center mx-4 text-xl font-semibold">
      <span className="mr-1 text-2xl">{icon}</span> {data}
    </p>
  )
}

const Board = () => {
  const router = useRouter()
  const { time, start, pause, reset } = useTimer()
  const [cards, setCards] = useState([])
  const [clicks, setClicks] = useState(0)
  const [won, setWon] = useState(false)
  const [activeCards, setActiveCards] = useState([])
  const [foundPairs, setFoundPairs] = useState([])

  const userOption = {
    theme: router.query.theme,
    difficulty: router.query.difficulty
  }

  useEffect(() => {
    if (userOption.theme === 'images') {
      switch (userOption.difficulty) {
        case 'easy':
          setCards(shuffle([...Images.slice(9), ...Images.slice(9)]))
          break
        case 'medium':
          setCards(shuffle([...Images.slice(6), ...Images.slice(6)]))
          break
        case 'hard':
          setCards(shuffle([...Images, ...Images]))
          break
        default:
          break
      }
    } else if (userOption.theme === 'numbers') {
      switch (userOption.difficulty) {
        case 'easy':
          console.log('plop icicicici')
          console.log(userOption.difficulty)
          setCards(shuffle([...numberArray.slice(9), ...numberArray.slice(9)]))
          break
        case 'medium':
          setCards(shuffle([...numberArray.slice(6), ...numberArray.slice(6)]))
          break
        case 'hard':
          setCards(shuffle([...numberArray, ...numberArray]))
          break
        default:
          break
      }
    } else {
      switch (userOption.difficulty) {
        case 'easy':
          setCards(shuffle([...iconsArray.slice(9), ...iconsArray.slice(9)]))
          break
        case 'medium':
          setCards(shuffle([...iconsArray.slice(6), ...iconsArray.slice(6)]))
          break
        case 'hard':
          setCards(shuffle([...iconsArray, ...iconsArray]))
          break
        default:
          break
      }
    }
  }, [userOption.difficulty, userOption.theme])

  useEffect(() => {
    if (won) {
      setFoundPairs([])
      setClicks(0)
      setActiveCards([])
      setWon(false)
      setCards([])
      pause()
      reset()
    }
  }, [pause, won, reset])

  // console.log([cards])
  // console.log(userOption.theme, userOption.difficulty)

  const flipCard = (index) => {
    if (activeCards.length === 0) {
      setActiveCards([index])
      start()
    }

    if (activeCards.length === 1) {
      const firstIndex = activeCards[0]
      const secondsIndex = index
      if (firstIndex === secondsIndex) {
        return
      }
      if (cards[firstIndex] === cards[secondsIndex]) {
        if (foundPairs.length + 2 === cards.length) {
          alert(
            new Date(time * 1000).toISOString().slice(14, 19) + `\n${clicks}`
          )
          setWon(true)
        }
        setFoundPairs([...foundPairs, firstIndex, secondsIndex])
      }
      setActiveCards([...activeCards, index])
    }

    if (activeCards.length === 2) {
      setActiveCards([index])
    }

    setClicks(clicks + 1)
  }

  return (
    <div>
      <Head>
        <title>Memory Game</title>
        <meta name="Memory game" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="2xl:px-96 lg:px-36 px-5 mx-auto mt-2 md:mt-10 rounded-xl text-slate-500 ">
        <div className="shadow-lg p-2 rounded-xl bg-slate-100 ">
          {/* HEADER */}
          <div className="flex justify-between">
            <Link href={'/'}>
              <a>
                <h1 className="text-3xl font-extrabold">memory</h1>
              </a>
            </Link>
            <div className="flex   ">
              <Stat
                icon={<MdTimer />}
                data={new Date(time * 1000).toISOString().slice(14, 19)}
              />
              <Stat icon={<GiCardPick />} data={foundPairs.length / 2} />
              <Stat icon={<GiClick />} data={clicks} />
            </div>
            <div className="flex">
              <MyButton
                myClasses={`bg-slate-500 mr-2 hover:bg-slate-700`}
                title="Menu"
                // onClick={openModal}
              />
              <MyButton
                myClasses={`bg-yellow-500 hover:bg-yellow-700`}
                title="Restart"
                // onClick={openModal}
              />
            </div>
          </div>

          {/* CONTENT  */}
          <div className="board my-16 w-8/12 mx-auto grid grid-cols-3 md:grid-cols-6 gap-5">
            {cards.map((card, index) => {
              const flippedToFront =
                activeCards.indexOf(index) !== -1 ||
                foundPairs.indexOf(index) !== -1
                  ? 'flipped'
                  : ''
              return (
                <div
                  className={`card-outer h-24 w-24  rounded-full ${flippedToFront}`}
                  key={index}
                  onClick={() => flipCard(index)}
                >
                  <div className="card h-24 w-24  rounded-full">
                    <div className="front absolute">
                      {userOption.theme === 'numbers' ||
                      userOption.theme === 'icones' ? (
                        <div className="flex justify-center items-center pb-2 pr-1 w-24 h-24">
                          <p className="text-6xl">{card}</p>
                        </div>
                      ) : (
                        // <img src={card} alt={`illustrations: /${index}`} />
                        <p>bientot une image</p>
                      )}
                    </div>
                    <div className="back absolute bg-slate-500 h-24 w-24 border rounded-full" />
                  </div>
                </div>
              )
            })}
          </div>
        </div>
      </main>
    </div>
  )
}

export default Board
