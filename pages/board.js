import React, { useState, useEffect } from 'react'

import { useRouter } from 'next/router'
import Link from 'next/link'
import Head from 'next/head'

import { shuffle } from 'lodash'
import { useTimer } from 'use-timer'

import MyButton from '../components/MyButton'

import { MdTimer, MdHome, MdRefresh } from 'react-icons/md'
import { GiCardPick, GiClick } from 'react-icons/gi'
import {
  DiCss3,
  DiGit,
  DiGithubBadge,
  DiHtml5,
  DiJava,
  DiJsBadge,
  DiLinux,
  DiMongodb,
  DiNodejsSmall,
  DiNpm,
  DiPostgresql,
  DiPython,
  DiRasberryPi,
  DiReact,
  DiStackoverflow,
  DiTerminal,
  DiUbuntu,
  DiVisualstudio
} from 'react-icons/di'

const numberArray = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
]
const iconsArray = [
  '😈',
  '☠️',
  '👽',
  '👾',
  '🤖',
  '🎃',
  '💩',
  '🤡',
  '🧙‍♂️',
  '👳🏾‍♂️',
  '👨🏾‍🚀',
  '🐙',
  '🦓',
  '🦍',
  '🍂',
  '🍄',
  '🍆',
  '🥜'
]

const MyDevIcons = [
  DiCss3,
  DiGit,
  DiGithubBadge,
  DiHtml5,
  DiJava,
  DiJsBadge,
  DiLinux,
  DiMongodb,
  DiNodejsSmall,
  DiNpm,
  DiPostgresql,
  DiPython,
  DiRasberryPi,
  DiReact,
  DiStackoverflow,
  DiTerminal,
  DiUbuntu,
  DiVisualstudio
]

const Stat = (props) => {
  const { icon, data } = props
  return (
    <p className="flex items-center mx-4 text-xl font-semibold">
      <span className="mr-1 text-2xl">{icon}</span> {data}
    </p>
  )
}

const Board = () => {
  const router = useRouter()
  const { time, start, pause, reset } = useTimer()
  const [cards, setCards] = useState([])
  const [clicks, setClicks] = useState(0)
  const [won, setWon] = useState(false)
  const [activeCards, setActiveCards] = useState([])
  const [foundPairs, setFoundPairs] = useState([])
  const [avtivedVictoryModal, setAvtivedVictoryModal] = useState(false)

  const userOption = {
    theme: router.query.theme,
    difficulty: router.query.difficulty
  }

  useEffect(() => {
    if (userOption.theme === 'devIcones') {
      switch (userOption.difficulty) {
        case 'easy':
          setCards(shuffle([...MyDevIcons.slice(9), ...MyDevIcons.slice(9)]))
          break
        case 'medium':
          setCards(shuffle([...MyDevIcons.slice(6), ...MyDevIcons.slice(6)]))
          break
        case 'hard':
          setCards(shuffle([...MyDevIcons, ...MyDevIcons]))
          break
        default:
          break
      }
    } else if (userOption.theme === 'numbers') {
      switch (userOption.difficulty) {
        case 'easy':
          setCards(shuffle([...numberArray.slice(9), ...numberArray.slice(9)]))
          break
        case 'medium':
          setCards(shuffle([...numberArray.slice(6), ...numberArray.slice(6)]))
          break
        case 'hard':
          setCards(shuffle([...numberArray, ...numberArray]))
          break
        default:
          break
      }
    } else {
      switch (userOption.difficulty) {
        case 'easy':
          setCards(shuffle([...iconsArray.slice(9), ...iconsArray.slice(9)]))
          break
        case 'medium':
          setCards(shuffle([...iconsArray.slice(6), ...iconsArray.slice(6)]))
          break
        case 'hard':
          setCards(shuffle([...iconsArray, ...iconsArray]))
          break
        default:
          break
      }
    }
  }, [userOption.difficulty, userOption.theme])

  useEffect(() => {
    if (won) {
      setFoundPairs([])
      setClicks(0)
      setActiveCards([])
      setWon(false)
      setCards([])
      reset()
    }
  }, [won, reset])

  const flipCard = (index) => {
    if (activeCards.length === 0) {
      setActiveCards([index])
      start()
    }

    if (activeCards.length === 1) {
      const firstIndex = activeCards[0]
      const secondsIndex = index
      if (firstIndex === secondsIndex) {
        return
      }
      if (cards[firstIndex] === cards[secondsIndex]) {
        if (foundPairs.length + 2 === cards.length) {
          pause()
          setAvtivedVictoryModal(true)
        }
        setFoundPairs([...foundPairs, firstIndex, secondsIndex])
      }
      setActiveCards([...activeCards, index])
    }

    if (activeCards.length === 2) {
      setActiveCards([index])
    }

    setClicks(clicks + 1)
  }

  const handleRestart = () => {
    router.reload()
  }

  const responsiveRules = ' h-16 w-16 sm:h-24 sm:w-24 '

  return (
    <div>
      <Head>
        <title>Memory Game</title>
        <meta name="Memory game" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="2xl:px-96 lg:px-36 md:px-12 px-0 mx-auto mt-0 md:mt-10 rounded-xl text-slate-500">
        <div className="shadow-lg p-2 rounded-xl bg-slate-100">
          {/* HEADER */}
          <div className="flex flex-col md:flex-row justify-between  ">
            <div className="flex">
              <Link href={'/'}>
                <a className="flex w-full">
                  <h1 className=" text-center w-full text-5xl md:text-3xl font-extrabold ">
                    memory
                  </h1>
                </a>
              </Link>
              <div className="flex md:hidden items-end ">
                <Link href={'/'}>
                  <span className="text-slate-500 mr-2 hover:text-slate-700 text-2xl cursor-pointer">
                    <MdHome />
                  </span>
                </Link>
                <span
                  className="text-yellow-500 mr-2 hover:text-yellow-700 text-2xl active:rotate-180 transition-transform duration-200 cursor-pointer"
                  onClick={handleRestart}
                >
                  <MdRefresh />
                </span>
              </div>
            </div>

            <div className="flex justify-center mt-3 md:mt-0">
              <Stat
                icon={<MdTimer />}
                data={new Date(time * 1000).toISOString().slice(14, 19)}
              />
              <Stat icon={<GiCardPick />} data={foundPairs.length / 2} />
              <Stat icon={<GiClick />} data={clicks} />
            </div>
            <div className="hidden md:flex">
              <Link href={'/'}>
                <a>
                  <MyButton
                    myClasses={`bg-slate-500 mr-2 hover:bg-slate-700`}
                    title="Menu"
                  />
                </a>
              </Link>

              <MyButton
                myClasses={`bg-yellow-500 hover:bg-yellow-700`}
                title="Restart"
                onClick={handleRestart}
              />
            </div>
          </div>
          {/* CONTENT  */}
          {!avtivedVictoryModal ? (
            <>
              <div className="my-5 md:my-16 w-12/12 xl:w-9/12 mx-auto grid grid-cols-4 md:grid-cols-6 gap-1 md:gap-3">
                {cards.map((card, index) => {
                  const Icon = cards[index]
                  const flippedToFront =
                    activeCards.indexOf(index) !== -1 ||
                    foundPairs.indexOf(index) !== -1
                      ? 'flipped'
                      : ''
                  return (
                    <div
                      className={` ${responsiveRules} card-outer mx-auto rounded-full ${flippedToFront}`}
                      key={index}
                      onClick={() => flipCard(index)}
                    >
                      <div className={` ${responsiveRules} card rounded-full`}>
                        <div className="front absolute">
                          {userOption.theme === 'numbers' ||
                          userOption.theme === 'emojis' ? (
                            <div
                              className={`${responsiveRules} flex justify-center items-center`}
                            >
                              <p className="text-3xl md:text-6xl font-mono font-black">
                                {card}
                              </p>
                            </div>
                          ) : (
                            <div
                              className={`flex justify-center items-center pb-2 pr-1 ${responsiveRules}`}
                            >
                              <p
                                className={`${responsiveRules} text-4xl md:text-8xl font-mono font-black text-yellow-500`}
                              >
                                <Icon />
                              </p>
                            </div>
                          )}
                        </div>
                        <div
                          className={`${responsiveRules} back absolute bg-slate-500 border rounded-full`}
                        />
                      </div>
                    </div>
                  )
                })}
              </div>
            </>
          ) : (
            <div className=" my-36">
              <p className="text-center text-3xl font-bold">
                Congratulation you win !!
              </p>
              <p className="text-center mt-2">
                You have successfully completed the {userOption.theme} &apos;s
                grid in {userOption.difficulty} mode.
              </p>
              <div className="flex justify-center mt-5">
                <Stat
                  icon={<MdTimer />}
                  data={new Date(time * 1000).toISOString().slice(14, 19)}
                />
                <Stat icon={<GiClick />} data={clicks} />
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  )
}

export default Board
